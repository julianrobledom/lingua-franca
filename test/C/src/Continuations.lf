// This tests continuations, which are like JavaScript's async/await.

target C {
    Build-Type: Debug
}

preamble {=
    #include <setjmp.h>
    #include "context_switch.h"
=}

reactor Callee {
    input req: request<int>
    output res: request<int>
    state ra: jmp_buf
    reaction(req) -> res {=
        lf_print("received request, value=%d", req->value.value);
        lf_set(res, ((lf_request_int_t) { .ctx=req->value.ctx, .value=req->value.value - 10 }));
    =}
}

reactor Caller {

    preamble {=
        LF_DECLARE_REQUEST(int);
    =}

    preamble {=
    =}

    output req: request<int>
    input res: request<int>
    state n: int(0)
    state ra: jmp_buf  // injected code
    reaction(startup, res) -> req {=
        int sum = 0;
        for (int i = self->n; i < self->n+9; i++) {
            sum += i*i;
        }
        lf_print("%s, sum=%d\n", "sending request", sum);
        lf_call(req, sum, res);
        lf_print(
            "sum=%d, res=%d, res - sum = %d.\n",
            sum,
            res->value.value,
            res->value.value - sum
        );
    =}
}

main reactor {
    caller = new Caller();
    callee = new Callee();
    caller.req -> callee.req;
    callee.res -> caller.res after 1 nsec;
}
