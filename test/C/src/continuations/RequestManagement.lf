target C

preamble {=
    #include <setjmp.h>
    #include "context_switch.h"
=}

reactor Ping(count: int(10)) {
    preamble {=
        LF_DECLARE_REQUEST(int)
    =}
    input receive: request<int>
    output send: request<int>
    state ra: jmp_buf  // injected code

    request_manager = new RequestManager<int>();

    request_manager.req_out -> send
    receive -> request_manager.res_in

    reaction(startup, request_manager.res_out) -> request_manager.req_in {=
        for (int i = 0; i < self->count; i++) {
            lf_print("ping %d", i);
            lf_call(send, i, receive);
        }
    =}
}

reactor Pong(expected: int(10)) {
    input receive: request<int>
    output send: request<int>
    state count: int(0)

    reaction(receive) -> send {=
        self->count++;
        lf_print("pong %d", receive->value);
        lf_set(send, ((lf_request(int)) { .ctx=receive->value.ctx, .value=receive->value.value }));
    =}

    reaction(shutdown) {=
        if (self->count != self->expected) {
            fprintf(stderr, "ERROR: Pong expected to receive %d inputs, but it received %d.\n",
                self->expected, self->count
            );
            exit(1);
        }
        printf("Success.\n");
    =}
}

reactor RequestManager<int>(
    max_pending: int(4),
    n: int(1),
    timeout: interval_t({=MSEC(1)=})
) {
    input [n] req_in: request<int>
    output [n] req_out: request<int>

    input [n] res_in: request<int>
    output [n] res_out: request<int>

    state num_pending: int
    // Cannot statically allocate??
    state pending_requests: int*

    logical action delete_old_pending

    reaction(res_in) -> res_out {=
        // If request in pending requests, forward to res_out
        //  and delete request from pending requests
        // Otherwise, do nothing
    =}

    reaction(req_in) -> req_out {=
        self->num_pending++;
        // add record of request to pending_requests
        lf_schedule(self->delete_old_pending, self->timeout);
    =}

    reaction(delete_old_pending) {=
        // cull pending requests
    =}
}

main reactor {
    ping = new Ping()
    pong = new Pong()
    ping.send -> pong.receive
    pong.send -> ping.receive after 0
}
