package org.lflang.generator.cpp

import org.lflang.AttributeUtils
import org.lflang.ast.ASTUtils
import org.lflang.generator.PrependOperator
import org.lflang.joinLn
import org.lflang.joinWithLn
import org.lflang.lf.Input
import org.lflang.lf.Reactor
import org.lflang.reactor
import org.lflang.toUnixString
import java.nio.file.Path

/** A C++ code generator for creating the required files for defining a ROS2 package. */
class CppRos2PackageGenerator(generator: CppGenerator) {
    private val fileConfig = generator.fileConfig
    private val targetConfig = generator.targetConfig
    val reactorCppSuffix = targetConfig.runtimeVersion ?: "default"
    val reactorCppName = "reactor-cpp-$reactorCppSuffix"
    private val dependencies =
        listOf("rclcpp", "rclcpp_components", reactorCppName) + (targetConfig.ros2Dependencies ?: listOf<String>())

    @Suppress("PrivatePropertyName") // allows us to use capital S as variable name below
    private val S = '$' // a little trick to escape the dollar sign with $S

    var nodeGenerators = emptyList<CppRos2NodeGenerator>()

    fun generatePackageXml(): String {
        return """
            |<?xml version="1.0"?>
            |<?xml-model href="http://download.ros.org/schema/package_format3.xsd" schematypens="http://www.w3.org/2001/XMLSchema"?>
            |<package format="3">
            |  <name>${fileConfig.name}</name>
            |  <version>0.0.0</version>
            |  <description>Autogenerated from ${fileConfig.srcFile}</description>
            |  <maintainer email="todo@todo.com">Todo</maintainer>
            |  <license>Todo</license>
            |  
            |  <buildtool_depend>ament_cmake</buildtool_depend>
            |  <buildtool_depend>ament_cmake_auto</buildtool_depend>
            |  
        ${" |"..dependencies.joinWithLn { "<depend>$it</depend>" }}
            |  <depend>lf_msgs_ros</depend>
            |  <depend>lf_wrapped_msgs</depend>
            |  <test_depend>ament_lint_auto</test_depend>
            |  <test_depend>ament_lint_common</test_depend>
            |
            |  <exec_depend>ament_index_python</exec_depend>
            |
            |  <export>
            |    <build_type>ament_cmake</build_type>
            |  </export>
            |</package>
        """.trimMargin()
    }

    fun generatePackageCmake(sources: List<Path>): String {
        // Resolve path to the cmake include files if any was provided
        val includeFiles = targetConfig.cmakeIncludes?.map { fileConfig.srcPath.resolve(it).toUnixString() }

        return with(PrependOperator) {
            with(CppGenerator) {
                """
                |cmake_minimum_required(VERSION $MINIMUM_CMAKE_VERSION)
                |project(${fileConfig.name} VERSION 0.0.0 LANGUAGES CXX)
                |
                |# require C++ $CPP_VERSION
                |set(CMAKE_CXX_STANDARD $CPP_VERSION CACHE STRING "The C++ standard is cached for visibility in external tools." FORCE)
                |set(CMAKE_CXX_STANDARD_REQUIRED ON)
                |set(CMAKE_CXX_EXTENSIONS OFF)
                |
                |set(DEFAULT_BUILD_TYPE "${targetConfig.cmakeBuildType}")
                |if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)
                |set    (CMAKE_BUILD_TYPE "$S{DEFAULT_BUILD_TYPE}" CACHE STRING "Choose the type of build." FORCE)
                |endif()
                |
                |# Invoke find_package() for all build and buildtool dependencies.
                |find_package(ament_cmake_auto REQUIRED)
                |find_package(lf_msgs_ros REQUIRED)
                |find_package(lf_wrapped_msgs REQUIRED)
                |ament_auto_find_build_dependencies()
                |include_directories(
                |   include 
                |   src/${fileConfig.srcGenBasePath.relativize(fileConfig.srcGenPkgPath).toUnixString()}
                |   "$S{LF_SRC_PKG_PATH}/src"
                |   "$S{PROJECT_SOURCE_DIR}/include/"
                |   "$S{PROJECT_SOURCE_DIR}/src/"
                |   "$S{PROJECT_SOURCE_DIR}/src/__include__"
                | )
                ${ nodeGenerators.map {
                    """
                    |add_executable(${it.nodeName}
                    |  src/${it.nodeName}.cc
                ${" |  src/"..sources.joinWithLn { it.toUnixString() }}
                    |)
                    |ament_target_dependencies(${it.nodeName} ${dependencies.joinToString(" ")} lf_msgs_ros lf_wrapped_msgs)
                    |target_link_libraries(${it.nodeName} $reactorCppName)
                    |
                    |install(
                    |     TARGETS ${it.nodeName}
                    |     DESTINATION lib/$S{PROJECT_NAME}
                    |   )  
                    |install(DIRECTORY launch
                    |   DESTINATION share/$S{PROJECT_NAME})
                    |
                    |if(MSVC)
                    |  target_compile_options(${it.nodeName} PRIVATE /W4)
                    |else()
                    |  target_compile_options(${it.nodeName} PRIVATE -Wall -Wextra -pedantic)
                    |endif()
                    """
                }.joinLn()}
                |
                |
                |
                |ament_package()
                |
            ${" |"..(includeFiles?.joinWithLn { "include(\"$it\")" } ?: "")}
            """.trimMargin()
            }
        }
    }

    private fun createReactorStructurePython(reactor : Reactor, nodeName : String = "") : String {
        var s = "Reactor(\"$nodeName\""
        s += "," + System.lineSeparator()
        s+= "["
        var isFirst : Boolean = true
        for (inst in reactor.instantiations) {
            if (isFirst) isFirst = false
            else s+=", "
            s+="Instantiation(\"${inst.name}\", "
            if (AttributeUtils.isFederate(inst)) {
                val instGen = nodeGenerators.filter{ it.reactor == inst.reactor}.first()
                s+="\"${instGen.nodeName}\", ${createReactorStructurePython(inst.reactor, instGen.nodeName)}"
            } else {
                s+="None, ${createReactorStructurePython(inst.reactor)}"
            }
            s+= ")"
        }
        s+= "]," + System.lineSeparator()
        s+= "["
        isFirst = true
        for (con in reactor.connections) {
            if (isFirst) isFirst = false
            else s+=", "
            s+="Connection("
            s+= "["
            isFirst = true
            for (leftP in con.leftPorts) {
                if (isFirst) isFirst = false
                else s+=", "

                s+= "Port(${if (leftP.container != null) "\"${leftP.container.name}\"" else "None" }" +
                        ", \"${leftP.variable.name}\", ${if (leftP.variable is Input) "True" else "False"})"
            }
            s+= "], "
            s+= "["
            isFirst = true
            for (rightP in con.rightPorts) {
                if (isFirst) isFirst = false
                else s+=", "
                s+= "Port(${if (rightP.container != null) "\"${rightP.container.name}\"" else "None" }, " +
                        "\"${rightP.variable.name}\", ${if (rightP.variable is Input) "True" else "False"})"
            }
            s+= "], "
            s+= if (con.isPhysical) "True" else "False"
            s+= ", "
            s+= if (con.delay != null) ASTUtils.getLiteralTimeValue(con.delay).toNanoSeconds() else "None"
            s+=")"
        }
        s+= "]"
        s+= ")" + System.lineSeparator()
        return s
    }

    fun generateLaunchFile(): String {
        val mainReactorNodeGen = nodeGenerators.filter{ it.reactor.isMain}.first()
        val reactorStructurePython = createReactorStructurePython(mainReactorNodeGen.reactor)
        return """
            |from __future__ import annotations
            |from typing import List, Tuple, Dict, Optional
            |from dataclasses import dataclass
            |from launch import LaunchDescription
            |from launch_ros.actions import Node
            |
            |class Port:
            |   instance_name: str
            |   name: str
            |   is_input: bool
            |   
            |   def __init__(self, _inst_name, _port_name, _is_input):
            |       self.instance_name = _inst_name
            |       self.name = _port_name
            |       self.is_input = _is_input
            |   
            |
            |class Connection:
            |   leftPorts: List[Port]
            |   rightPorts: List[Port]
            |   physical: bool
            |   delay: Optional[long]
            |   
            |   def __init__(self, lPorts, rPorts, isPhysical, _delay):
            |       self.leftPorts = lPorts
            |       self.rightPorts = rPorts
            |       self.physical = isPhysical
            |       self.delay = _delay
            |       
            |class Instantiation:
            |   name: str
            |   executable: str
            |   reactor: Reactor
            |   
            |   def __init__(self, _name, _executable, _reactor):
            |       self.name = _name
            |       self.executable = _executable
            |       self.reactor = _reactor
            |
            |class Reactor:
            |   classname: str
            |   instantiations: List[Instantiation]
            |   connections: List[Connection]
            |   
            |   def __init__(self, _classname, _instantiations, _connections):
            |       self.classname = _classname
            |       self.instantiations = _instantiations
            |       self.connections = _connections
            |       
            |mainInstance : Reactor = Instantiation("${mainReactorNodeGen.reactor.name}", "${mainReactorNodeGen.nodeName}",
            |$reactorStructurePython
            |)
            |
            |def get_instance_by_prefix(prefix: str) -> Instantiation:
            |   if prefix[:len("/${mainReactorNodeGen.reactor.name}")] != "/${mainReactorNodeGen.reactor.name}":
            |       raise RuntimeError("prefix must start with /${mainReactorNodeGen.reactor.name}")
            |   prefix_without_main = prefix[len("/${mainReactorNodeGen.reactor.name}"):]
            |   splits = prefix_without_main.split("/")
            |   if not splits:
            |       return mainInstance
            |   inst = mainInstance
            |   if splits[:1][0] != "":
            |       raise RuntimeError("prefix is incorrect")
            |   for split in splits:
            |       filter_res = filter(lambda x: x.name == split, inst.reactor.instantiations)
            |       if len(filter_res) != 1:
            |           raise RuntimeError("instance " + split +" not found") 
            |       else:
            |           inst = filter_res[0]
            |   return inst
            |   
            |                   
            |def generate_launch_description():
            |   
            |   prefix_param_dict : Dict[str, Dict[str,str]] = {}
            |   container_prefix_dict : Dict[str, str] = {} # key: instance prefix, # value: container prefix
            |   instances_todo : List[Tuple[str, Instantiation, List[Connection]]] = [["", mainInstance, []]] # str is container prefix, list is connections from container regarding this instance
            |   while instances_todo:
            |       [prefix, instance, connections] = instances_todo.pop(0)
            |       lf_federate_prefix = prefix + "/" + instance.name
            |       # add next instances to list
            |       for next_inst in instance.reactor.instantiations:
            |           next_conns = []
            |           for con in instance.reactor.connections:
            |               for i in range(len(con.rightPorts)):
            |                   if con.leftPorts[i].instance_name == next_inst.name or con.rightPorts[i].instance_name == next_inst.name:
            |                       next_conns.append(con)
            |           instances_todo.append((lf_federate_prefix, next_inst, next_conns))
            |       # create node parameters
            |       
            |       container_prefix_dict[lf_federate_prefix] = prefix
            |       prefix_param_dict[lf_federate_prefix] = instance_param_dict = {}
            |       instance_param_dict["lf_federate_prefix"] = lf_federate_prefix
            |       for con in connections:
            |           physical_string = "_physical" if con.physical else ""
            |           for i in range(len(con.rightPorts)):
            |               leftP = con.leftPorts[i]
            |               rightP = con.rightPorts[i]
            |               if leftP.instance_name == instance.name and not leftP.is_input:
            |                   instance_param_dict[leftP.name + physical_string] = lf_federate_prefix + "/" + leftP.name
            |               if rightP.instance_name == instance.name and leftP.is_input and leftP.instance_name == None:
            |                   if leftP.name in prefix_param_dict[prefix]:
            |                       instance_param_dict[rightP.name] = prefix_param_dict[prefix][leftP.name]
            |                   if leftP.name + "_physical" in prefix_param_dict[prefix]:
            |                       instance_param_dict[rightP.name+"_physical"] = prefix_param_dict[prefix][leftP.name+"_physical"]
            |               if rightP.instance_name == instance.name and rightP.is_input and leftP.instance_name != None:
            |                   instance_param_dict[rightP.name + physical_string] = prefix +"/"+ leftP.instance_name + "/" + leftP.name
            |                   if con.delay is not None:
            |                       instance_param_dict[rightP.name + physical_string + "_delay"] = con.delay
            |               if leftP.instance_name == instance.name and rightP.instance_name == None and not rightP.is_input:
            |                   # connection like r{x.port -> out} while current instance is x
            |                   # we go through the reactors to see if parent.out is used to replace it with x.port
            |                   name_to_search_for = prefix + "/" + rightP.name
            |                   print(name_to_search_for)
            |                   for key in prefix_param_dict:
            |                       for key2 in prefix_param_dict[key]:
            |                           if prefix_param_dict[key][key2] == name_to_search_for:
            |                               prefix_param_dict[key][key2] = lf_federate_prefix + "/" + leftP.name

            |                   
            |   
            |   # launch nodes if they are federate
            |   to_search_feds : List[Tuple[str,Instantiation]] = [["", mainInstance]]
            |   nodes = []
            |   while to_search_feds:
            |       [prefix, instance] = to_search_feds.pop(0)
            |       fed_prefix = prefix + "/" + instance.name
            |       for inst in instance.reactor.instantiations:
            |           to_search_feds.append((fed_prefix, inst))
            |       if instance.executable != None:
            |           nodes.append(Node(package='${fileConfig.name}',
            |                                  executable=instance.executable,
            |                                  name=fed_prefix.replace("/","_"),
            |                                  parameters=[prefix_param_dict[fed_prefix]])
            |                           )
            |           print("parameters for node with prefix " + fed_prefix, prefix_param_dict[fed_prefix])
            |   return LaunchDescription(nodes)
        """.trimMargin()

    }

    fun generateBinScript(): String {
        val relPath = fileConfig.binPath.relativize(fileConfig.outPath).toUnixString()

        return """
            |#!/bin/bash
            |script_dir="$S(dirname -- "$S(readlink -f -- "${S}0")")"
            |source "$S{script_dir}/$relPath/src-gen/install/setup.sh"
            |ros2 launch ${fileConfig.name} default.launch.py
        """.trimMargin()
    }
}
